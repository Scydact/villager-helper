{"version":3,"sources":["MenuBar.js","Utils.js","VillagerObject.js","VillagerInfo.js","ItemIcon.js","RecipeThumb.js","OffersInfo.js","ItemInfo.js","RecipeInfo.js","App.js","serviceWorker.js","index.js"],"names":["MenuBar","className","createId","Math","random","toString","substr","CONSTANTS","MAX_VALUE","BYTE","SHORT","INT","LONG","MIN_VALUE","toTitleCase","s","split","map","x","charAt","toUpperCase","slice","join","versions","MinecraftData","supportedVersions","pc","mdlast","length","findItemInfo","str","id","splice","findItemOrBlockByName","window","VILLAGER","professions","biomes","getVillagerImagePath","biome","profession","b","p","Villager","entity","customName","level","xp","isXpRelatedToLevel","type","offers","recipe","index","this","newOffers","filter","indexOf","uuid","oldRecipe","newRecipe","oldIdx","Item","count","tag","Recipe","extraData","rewardExp","maxUses","uses","priceMultiplier","specialPrice","demand","trades","buy","buyB","sell","Object","assign","clone","VillagerInfo","data","props","onChange","src","vo","alt","value","name","y","key","React","Component","ItemIcon","item_icon","displayName","mi","findItemIcon","itemId","item_elem","itemCount","item_count","RecipeThumb","onClick","OffersInfo","createList","c","selectedItem","functionCollection","setSelectedRecipe","addRecipe","cloneRecipe","removeRecipe","moveRecipeUp","moveRecipeDown","ItemInfo","placeholder","RecipeInfo","buyChangeHandler","buyBChangeHandler","sellChangeHandler","data-tip","data-for","extraDataChangeHandler","checked","App","handleChangeVillager","event","target","parseInt","setState","state","villager","offersFunctionCollection","i","selectedRecipe","undefined","newSelect","refreshRecipe","sr","moveRecipe","direction","oldIndex","recipeFunctionCollection","console","log","parseFloat","originalRecipe","modifiedRecipe","updateRecipe","itemChangeHandler","propName","app","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.536de452.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function MenuBar() {\r\n    return <div className=\"menu-bar\">{'<Something something>'}</div>\r\n}\r\n","import * as mi from 'minecraft-items';\r\nimport MinecraftData from 'minecraft-data';\r\n\r\nexport function createId() {\r\n    // Math.random should be unique because of its seeding algorithm.\r\n    // Convert it to base 36 (numbers + letters), and grab the first 9 characters\r\n    // after the decimal.\r\n    // Source: https://gist.github.com/gordonbrander/2230317\r\n    return '_' + Math.random().toString(36).substr(2, 9);\r\n};\r\n\r\nexport const CONSTANTS = {\r\n    MAX_VALUE: {\r\n        BYTE: (2 ** 7) - 1,\r\n        SHORT: (2 ** 15) - 1,\r\n        INT: (2 ** 31) - 1,\r\n        LONG: (2 ** 63) - 1,\r\n    },\r\n    MIN_VALUE: {\r\n        BYTE: -(2 ** 7),\r\n        SHORT: -(2 ** 15),\r\n        INT: -(2 ** 31),\r\n        LONG: -(2 ** 63),\r\n    }\r\n}\r\n\r\nexport function toTitleCase(s) {\r\n    if (typeof s !== 'string') return '';\r\n    return s.split(' ')\r\n        .map(x => x.charAt(0).toUpperCase() + x.slice(1))\r\n        .join(' ');\r\n}\r\n\r\nlet versions = MinecraftData.supportedVersions.pc;\r\nlet mdlast = MinecraftData(versions[versions.length-1]);\r\n\r\n/** Finds item data from minecraft-data module. */\r\nexport function findItemInfo(str) {\r\n    let id = str.split(':').splice(-1);\r\n    return mdlast.findItemOrBlockByName(id);\r\n}\r\n/** Finds an item icon by its display name */\r\nexport function findItemIcon(name, isDisplayName = false) {\r\n    if (!isDisplayName) {\r\n        let x = findItemInfo(name);\r\n        name = x ? x.displayName : name;\r\n    }\r\n    let x = mi.get(name);\r\n    return (x) ? x['icon'] : null;\r\n}\r\nexport function findDisplayName(str) {\r\n\r\n}\r\nwindow.mdlast = mdlast;","import { CONSTANTS, createId, toTitleCase } from \"./Utils\";\r\n\r\nexport const VILLAGER = {\r\n    professions: [\r\n        'armorer',\r\n        'butcher',\r\n        'cartographer',\r\n        'cleric',\r\n        'farmer',\r\n        'fisherman',\r\n        'fletcher',\r\n        'leatherworker',\r\n        'librarian',\r\n        'nitwit',\r\n        'none',\r\n        'mason',\r\n        'shepherd',\r\n        'toolsmith',\r\n        'weaponsmith',\r\n    ],\r\n    biomes: [\r\n        'desert',\r\n        'jungle',\r\n        'plains',\r\n        'savanna',\r\n        'snow',\r\n        'swamp',\r\n        'taiga',\r\n    ],\r\n    getVillagerImagePath: (biome, profession) => {\r\n        let b = (biome === 'snow') ? 'Snowy' : toTitleCase(biome);\r\n        let p = (profession === 'none') ? 'Villager_Base' : toTitleCase(profession);\r\n        return `./assets/villager_pics/${b}_${p}.png`\r\n    },\r\n}\r\n\r\nexport class Villager {\r\n    entity = {\r\n        customName: '',\r\n        level: 5,\r\n        xp: 1000,\r\n        isXpRelatedToLevel: true,\r\n        profession: 'none',\r\n        type: 'plains',\r\n    }\r\n    offers = [];\r\n\r\n    /** Adds the given recipe to the offer list. \r\n     * \r\n     * If an index is given, will insert at that position. */\r\n    addRecipe(recipe, index = this.offers.length) {\r\n        let newOffers = [...this.offers];\r\n        newOffers.splice(index, 0, recipe);\r\n        this.offers = newOffers;\r\n        return recipe;\r\n    }\r\n    /** Removes the given recipe from the offer list. \r\n     * \r\n     * To remove by index, just do RemoveRecipe(offers[idx]) */\r\n    removeRecipe(recipe) {\r\n        this.offers = this.offers.filter((x) => x !== recipe);\r\n        return this.offers;\r\n    }\r\n    /** Moves the given recipe to the given index. \r\n     * \r\n     * Returns true if successful, otherwise false.*/\r\n    moveRecipe(recipe, index) {\r\n        let oldIdx = this.offers.indexOf(recipe);\r\n        if (oldIdx === -1) return false;\r\n\r\n        // index wraparound\r\n        index = (index + this.offers.length) % this.offers.length;\r\n\r\n        let newOffers = this.offers.filter((x) => x !== recipe);\r\n        newOffers.splice(index, 0, recipe);\r\n        this.offers = newOffers;\r\n        return true;\r\n    }\r\n    /** Finds and returns the recipe with the given uuid \r\n     * \r\n     * To find the index, just do offers.indexOf(findRecipe(uuid)) */\r\n    findRecipe(uuid) {\r\n        for (let recipe in this.offers) {\r\n            if (recipe['uuid'] === uuid) return recipe;\r\n        }\r\n        return null;\r\n    }\r\n    /** Updates the old recipe with a new one */\r\n    updateRecipe(oldRecipe, newRecipe) {\r\n        let oldIdx = this.offers.indexOf(oldRecipe);\r\n        if (oldIdx === -1) return false;\r\n\r\n        let newOffers = [...this.offers];\r\n        newOffers[oldIdx] = newRecipe;\r\n        this.offers = newOffers;\r\n        return true;\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nexport class Item {\r\n    uuid = createId(); // used as the key for React lists\r\n\r\n    constructor(count = 1, id = \"stone\", tag = \"\") {\r\n        this.count = count;\r\n        this.id = id;\r\n        this.tag = tag;\r\n    }\r\n    clone() {\r\n        return new Item(this.count, this.id, this.tag);\r\n    }\r\n}\r\n\r\nexport class Recipe {\r\n    uuid = createId(); // used as the key for React lists\r\n\r\n    extraData = {\r\n        rewardExp: false, // if this trade rewards exp to the player\r\n        maxUses: CONSTANTS.MAX_VALUE.INT,\r\n        uses: 0,\r\n\r\n        xp: 0, //xp that the villager gets\r\n        priceMultiplier: 0, //multiplier of 'demand'\r\n        specialPrice: 0, //special modifier\r\n        demand: 0, // maybe ignore all these values if 0.\r\n    }\r\n\r\n    trades = {\r\n        buy: new Item(1,'emerald'),\r\n        buyB: new Item(0,'air'),\r\n        sell: new Item(1,'paper'),\r\n    }\r\n    clone() {\r\n        let x = new Recipe();\r\n\r\n        x.extraData = Object.assign({},this.extraData);\r\n        x.trades = {\r\n            buy: this.trades.buy.clone(),\r\n            buyB: this.trades.buyB.clone(),\r\n            sell: this.trades.sell.clone()\r\n        };\r\n\r\n        return x;\r\n    }\r\n}\r\n\r\n","import React from 'react';\r\nimport * as vo from './VillagerObject';\r\nimport { toTitleCase } from './Utils';\r\n\r\nexport class VillagerInfo extends React.Component {\r\n    render() {\r\n        let data = this.props.data;\r\n        let onChange = this.props.onChange;\r\n        return (\r\n            <div className=\"villager card\">\r\n                <img\r\n                    className=\"villager-image\"\r\n                    src={vo.VILLAGER.getVillagerImagePath(data.type, data.profession)}\r\n                    alt={`Villager: ${data.type}_${data.profession}`} />\r\n\r\n                <div className=\"villager-form form\">\r\n\r\n                    <label>Name: </label>\r\n                    <input\r\n                        type=\"text\"\r\n                        value={data.customName}\r\n                        name=\"customName\"\r\n                        onChange={onChange} />\r\n\r\n                    <label>Profession: </label>\r\n                    <select\r\n                        type=\"text\"\r\n                        value={data.profession}\r\n                        name=\"profession\"\r\n                        onChange={onChange}>\r\n                        {vo.VILLAGER.professions.map(\r\n                            (x, y) => <option key={y} value={x}>{toTitleCase(x)}</option>\r\n                        )}\r\n                    </select>\r\n\r\n                    <label>Biome: </label>\r\n                    <select\r\n                        type=\"option\"\r\n                        value={data.type}\r\n                        name=\"type\"\r\n                        onChange={onChange}>\r\n                        {vo.VILLAGER.biomes.map(\r\n                            (x, y) => <option key={y} value={x}>{toTitleCase(x)}</option>\r\n                        )}\r\n                    </select>\r\n\r\n                    <label>Level: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={data.level}\r\n                        name=\"level\"\r\n                        onChange={onChange} />\r\n\r\n                    <label>Xp: </label>\r\n                    <input\r\n                        type=\"number\"\r\n                        value={data.xp}\r\n                        name=\"xp\"\r\n                        onChange={onChange} />\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport * as vo from './VillagerObject';\r\nimport { findItemIcon } from './Utils';\r\n\r\nexport function ItemIcon(props) {\r\n    let item_icon = findItemIcon(props.itemId);\r\n    let item_elem = item_icon && props.itemCount !== 0 ? <img src={`data:image/png;base64, ${item_icon}`} alt=\"item-img\"/> : null;\r\n\r\n    let item_count = null;\r\n    if (props.itemCount) {\r\n        if (props.itemCount > 1) item_count = <div className=\"item-icon-count mc-font\">{props.itemCount}</div>\r\n        else if (props.itemCount < 0) item_count = <div className=\"item-icon-count item-icon-count-negative mc-font\">{props.itemCount}</div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"item-icon\">{item_elem}{item_count}</div>\r\n    )\r\n}","import React from 'react';\r\nimport { ItemIcon } from './ItemIcon';\r\n\r\nexport function RecipeThumb(props) {\r\n    /**\r\n    uuid = createId(); // used as the key for React lists\r\n\r\n    extraData = {\r\n        rewardExp: false, // if this trade rewards exp to the player\r\n        maxUses: CONSTANTS.MAX_VALUE.INT,\r\n        uses: 0,\r\n\r\n        xp: 0, //xp that the villager gets\r\n        priceMultiplier: 0, //multiplier of 'demand'\r\n        specialPrice: 0, //special modifier\r\n        demand: 0, // maybe ignore all these values if 0.\r\n    }\r\n\r\n    trades = {\r\n        buy: new Item(),\r\n        buyB: new Item(0),\r\n        sell: new Item(),\r\n    }\r\n     */\r\n    return (\r\n        <li onClick={() => props.onClick(props.data)} className={`item-thumb ${props.className}`}>\r\n            <ItemIcon itemId={props.data.trades.buy.id} itemCount={props.data.trades.buy.count} />\r\n            {props.data.trades.buyB.count ? (<span className=\"item-thumb-sign mc-font\">+</span>) : null}\r\n            {props.data.trades.buyB.count ? (<ItemIcon itemId={props.data.trades.buyB.id} itemCount={props.data.trades.buyB.count} />) : null}\r\n            <span className=\"item-thumb-sign mc-font\">=</span><ItemIcon itemId={props.data.trades.sell.id} itemCount={props.data.trades.sell.count} />\r\n            {/* <span>R#{props.data.uuid}</span> */}\r\n        </li>\r\n    );\r\n}","import React from 'react';\r\nimport { RecipeThumb } from './RecipeThumb';\r\n\r\nexport class OffersInfo extends React.Component {\r\n\r\n    createList = () => {\r\n        return this.props.data.map(\r\n            (x) => {\r\n                let c = (x.uuid === this.props.selectedItem.uuid) ? \"active\" : \"\";\r\n                return <RecipeThumb\r\n                    key={x.uuid}\r\n                    data={x}\r\n                    className={c}\r\n                    onClick={this.props.functionCollection.setSelectedRecipe}\r\n                />\r\n            }\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"offers card\">\r\n                <h1>Offers</h1>\r\n                <div className=\"offers-list-wrapper\">\r\n                    <div className=\"offers-btn-wrapper\">\r\n                        <button onClick={this.props.functionCollection.addRecipe}>+</button>\r\n                        <button onClick={this.props.functionCollection.cloneRecipe}>C</button>\r\n                        <button onClick={this.props.functionCollection.removeRecipe}>-</button>\r\n                        <button onClick={this.props.functionCollection.moveRecipeUp}>▲</button>\r\n                        <button onClick={this.props.functionCollection.moveRecipeDown}>▼</button>\r\n                    </div>\r\n                    <ul className=\"offers-list\">\r\n                        {this.createList()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport { ItemIcon } from './ItemIcon';\r\n\r\nexport function ItemInfo(props) {\r\n    return (\r\n        <div className=\"item\">\r\n            <ItemIcon itemId={props.data.id} itemCount={props.data.count} />\r\n            <div>\r\n                <label>Id: </label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={props.data.id}\r\n                    name=\"id\"\r\n                    placeholder=\"Item ID (no spaces, lowercase)\"\r\n                    onChange={props.onChange} />\r\n\r\n                <label>Count: </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.data.count}\r\n                    name=\"count\"\r\n                    placeholder=\"Count\"\r\n                    onChange={props.onChange} />\r\n\r\n                <label>Tag: </label>\r\n                <input\r\n                    type=\"text\"\r\n                    value={props.data.tag}\r\n                    name=\"tag\"\r\n                    placeholder=\"{itemtag: false}\"\r\n                    onChange={props.onChange} />\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport ReactTooltip from 'react-tooltip';\r\nimport { CONSTANTS } from './Utils';\r\nimport { ItemInfo } from './ItemInfo';\r\n\r\nexport function RecipeInfo(props) {\r\n    if (props.data == null)\r\n        return (\r\n            <div className=\"recipe card\">\r\n                <h1>Trade</h1>\r\n                <p>No trade selected.</p>\r\n            </div>\r\n        )\r\n\r\n    return (\r\n        <div className=\"recipe card\">\r\n            <h1>Trade</h1>\r\n            {/* <p>Trade {props.data.uuid} selected.</p> */}\r\n\r\n            <div className=\"item-wrapper card\">\r\n                <h2>Buy</h2>\r\n                <ItemInfo\r\n                    data={props.data.trades.buy}\r\n                    onChange={props.functionCollection.buyChangeHandler}\r\n                />\r\n            </div>\r\n            <div className=\"item-wrapper card\">\r\n                <h2>Buy B</h2>\r\n                <ItemInfo\r\n                    data={props.data.trades.buyB}\r\n                    onChange={props.functionCollection.buyBChangeHandler}\r\n                />\r\n            </div>\r\n            <div className=\"item-wrapper card\">\r\n                <h2>Sell</h2>\r\n                <ItemInfo\r\n                    data={props.data.trades.sell}\r\n                    onChange={props.functionCollection.sellChangeHandler}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"form card\">\r\n                <h2 className=\"form-2header\">Extra data</h2>\r\n                <label data-tip data-for=\"tip-maxuses\">Max Uses: </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.data.extraData.maxUses}\r\n                    name=\"maxUses\"\r\n                    onChange={props.functionCollection.extraDataChangeHandler} />\r\n                <ReactTooltip id=\"tip-maxuses\">\r\n                    The maximum number of times this trade can be used before it is disabled.<br />\r\n                    Increases by a random amount from 2 to 12 when offers are refreshed.<br />\r\n                    Set to {CONSTANTS.MAX_VALUE.INT.toString()} (or any other large number) to disable.\r\n                </ReactTooltip>\r\n\r\n                <label data-tip data-for=\"tip-rewardexp\">Reward player XP: </label>\r\n                <input\r\n                    type=\"checkbox\"\r\n                    checked={props.data.extraData.rewardExp}\r\n                    name=\"rewardExp\"\r\n                    onChange={props.functionCollection.extraDataChangeHandler} />\r\n                <ReactTooltip id=\"tip-rewardexp\">\r\n                    Whether this trade provides XP orb drops.\r\n                </ReactTooltip>\r\n\r\n                <label data-tip data-for=\"tip-xp\">Villager XP: </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.data.extraData.xp}\r\n                    name=\"xp\"\r\n                    onChange={props.functionCollection.extraDataChangeHandler} />\r\n                <ReactTooltip id=\"tip-xp\">\r\n                    How much experience the villager gets from this trade.\r\n                </ReactTooltip>\r\n\r\n                <label data-tip data-for=\"tip-pricemultiplier\">Price Multiplier: </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.data.extraData.priceMultiplier}\r\n                    name=\"priceMultiplier\"\r\n                    onChange={props.functionCollection.extraDataChangeHandler} />\r\n                <ReactTooltip id=\"tip-pricemultiplier\">\r\n                    The multiplier on the  demand price adjuster;\r\n                    the final adjusted price is added to the first 'cost' item's price.\r\n                </ReactTooltip>\r\n\r\n                <label data-tip data-for=\"tip-specialprice\">Special price: </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.data.extraData.specialPrice}\r\n                    name=\"specialPrice\"\r\n                    onChange={props.functionCollection.extraDataChangeHandler} />\r\n                <ReactTooltip id=\"tip-specialprice\">\r\n                    A modifier added to the original price of the first 'cost' item.\r\n                </ReactTooltip>\r\n\r\n                <label data-tip data-for=\"tip-demand\">Price Multiplier: </label>\r\n                <input\r\n                    type=\"number\"\r\n                    value={props.data.extraData.demand}\r\n                    name=\"demand\"\r\n                    onChange={props.functionCollection.extraDataChangeHandler} />\r\n                <ReactTooltip id=\"tip-demand\">\r\n                    The price adjuster of the first 'cost' item based on demand. <br />\r\n                    Updated when a villager resupply.\r\n                </ReactTooltip>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\n//import logo, { ReactComponent } from './logo.svg';\nimport './App.css';\nimport { MenuBar } from './MenuBar';\nimport { VillagerInfo } from './VillagerInfo';\nimport { OffersInfo } from './OffersInfo';\nimport { RecipeInfo } from './RecipeInfo';\nimport * as vo from './VillagerObject';\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.villager = new vo.Villager();\n        // this.villager.addRecipe(new vo.Recipe());\n        this.state = {\n            entity: this.villager.entity,\n            offers: this.villager.offers,\n            selectedRecipe: null,\n        }\n        window.app = this;\n    }\n\n    handleChangeVillager = (event) => {\n        let key = event.target.name;\n        let value = event.target.value;\n        if (event.target.type === 'number')\n            value = parseInt(value);\n        this.setState({ entity: { ...this.state['entity'], [key]: value } });\n        this.villager.entity = this.state.entity;\n\n    }\n\n    refreshRecipe(newSelect) {\n        this.setState({ selectedRecipe: newSelect, offers: [...this.villager.offers] });\n    }\n\n    offersFunctionCollection = {\n        addRecipe: () => {\n            let i = (this.state.selectedRecipe) ? this.state.offers.indexOf(this.state.selectedRecipe) + 1 : undefined;\n            let newSelect = this.villager.addRecipe(new vo.Recipe(), i);\n            this.refreshRecipe(newSelect);\n        },\n        cloneRecipe: () => {\n            let sr = this.state.selectedRecipe;\n            if (sr == null) return;\n            let i = this.state.offers.indexOf(this.state.selectedRecipe) + 1;\n            let newSelect = this.villager.addRecipe(sr.clone(), i);\n            this.refreshRecipe(newSelect);\n        },\n        setSelectedRecipe: (recipe) => {\n            this.setState({ selectedRecipe: recipe });\n        },\n        moveRecipe: (recipe, direction) => {\n            let i = this.villager.offers.indexOf(recipe);\n            this.villager.moveRecipe(recipe, i + direction);\n            this.setState({ offers: [...this.villager.offers] });\n        },\n        moveRecipeUp: () => {\n            this.offersFunctionCollection.moveRecipe(this.state.selectedRecipe, -1);\n        },\n        moveRecipeDown: () => {\n            this.offersFunctionCollection.moveRecipe(this.state.selectedRecipe, 1);\n        },\n        removeRecipe: () => {\n            let oldIndex = this.villager.offers.indexOf(this.state.selectedRecipe);\n            this.villager.removeRecipe(this.state.selectedRecipe);\n            let newSelect = this.villager.offers[oldIndex - 1] || this.villager.offers[oldIndex] || null;\n            this.refreshRecipe(newSelect);\n        },\n    }\n\n    recipeFunctionCollection = {\n        extraDataChangeHandler: (event) => {\n            let key = event.target.name;\n            let value = event.target.value;\n            console.log(event.target.checked);\n            if (event.target.type === 'number')\n                value = (event.target.name === 'priceMultiplier') ? parseFloat(value) : parseInt(value);\n            if (event.target.type === 'checkbox')\n                value = event.target.checked;\n\n            let originalRecipe = this.state['selectedRecipe'];\n\n            let modifiedRecipe = originalRecipe.clone();\n            modifiedRecipe.extraData[key] = value;\n\n            this.villager.updateRecipe(originalRecipe, modifiedRecipe);\n            this.refreshRecipe(modifiedRecipe);\n        },\n        itemChangeHandler: (event, propName) => {\n            let key = event.target.name;\n            let value = event.target.value;\n            if (event.target.type === 'number')\n                value = parseInt(value);\n\n            let originalRecipe = this.state['selectedRecipe'];\n\n            let modifiedRecipe = originalRecipe.clone();\n            modifiedRecipe.trades[propName][key] = value;\n\n            this.villager.updateRecipe(originalRecipe, modifiedRecipe);\n            this.refreshRecipe(modifiedRecipe);\n        },\n        buyChangeHandler: (event) => this.recipeFunctionCollection.itemChangeHandler(event, 'buy'),\n        buyBChangeHandler: (event) => this.recipeFunctionCollection.itemChangeHandler(event, 'buyB'),\n        sellChangeHandler: (event) => this.recipeFunctionCollection.itemChangeHandler(event, 'sell'),\n\n    }\n\n    render() {\n        return (\n            <div className=\"app\">\n                <MenuBar />\n                <div className=\"main\">\n                    <VillagerInfo\n                        data={this.state.entity}\n                        onChange={this.handleChangeVillager}\n                    />\n                    <OffersInfo\n                        data={this.state.offers}\n                        villager={this.villager}\n                        functionCollection={this.offersFunctionCollection}\n                        selectedItem={this.state.selectedRecipe}\n                    />\n                    <RecipeInfo\n                        data={this.state.selectedRecipe}\n                        functionCollection={this.recipeFunctionCollection}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n\nwindow.vo = vo;\n/**\n * To insert image from data:\n * <img src=\"data:image/png;base64, DATAHEREFROM.icon\"/>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './minecraftia.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}